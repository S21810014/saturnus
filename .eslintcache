[{"/home/spyro/js/unklabfun_react/src/index.js":"1","/home/spyro/js/unklabfun_react/src/App.js":"2","/home/spyro/js/unklabfun_react/src/components/Main.js":"3","/home/spyro/js/unklabfun_react/src/components/NavBar.js":"4","/home/spyro/js/unklabfun_react/src/components/Card.js":"5","/home/spyro/js/unklabfun_react/src/components/PostDetail.js":"6"},{"size":176,"mtime":1607472673438,"results":"7","hashOfConfig":"8"},{"size":2406,"mtime":1607596536898,"results":"9","hashOfConfig":"8"},{"size":2971,"mtime":1607772194538,"results":"10","hashOfConfig":"8"},{"size":1493,"mtime":1607585690602,"results":"11","hashOfConfig":"8"},{"size":1627,"mtime":1607591499325,"results":"12","hashOfConfig":"8"},{"size":2026,"mtime":1607596649291,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1knp9o7",{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/home/spyro/js/unklabfun_react/src/index.js",[],["29","30"],"/home/spyro/js/unklabfun_react/src/App.js",["31"],"import React, { useEffect, useState } from 'react'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport Main from './components/Main.js'\nimport NavBar from './components/NavBar.js'\nimport PostDetails from './components/PostDetail'\n\nfunction App() {\n  const [layoutState, setLayoutState] = useState(null)\n  const [imageApi, setImageApi] = useState(null)\n\n  const fetchImages = (endLayoutCallback) => {\n      if(imageApi === null) {\n          fetch(`https://api.unklab.fun/latest/1/`).then(resp => resp.json()).then(data => {\n                  setImageApi(() => {\n                      return {\n                          ...data.data,\n                          page_now: parseInt(data.data.page_now),\n                          posts: data.data.posts.map((el, idx) => ({...el, groupKey: 0, id: idx}))\n                      }\n                  })\n                  endLayoutCallback()\n              })\n      } else {\n          if(parseInt(imageApi.page_now) !== imageApi.last_page) {\n              fetch(`https://api.unklab.fun/latest/${parseInt(imageApi.page_now) + 1}/`).then(resp => resp.json()).then(data => {\n                  setImageApi(prevState => {\n                    return {\n                        page_now: data.data.page_now,\n                        last_page: data.data.last_page,\n                        posts: [...prevState.posts, ...data.data.posts.map((el, idx) => ({...el, groupKey: parseInt(data.data.page_now) - 1, id: prevState.posts.length + idx}))]\n                    }\n                  })\n                  return true\n              }).then(idk => endLayoutCallback())\n          }\n      }\n  }\n\n  useEffect(() => {\n    fetchImages(() => console.log(\"firstFetch\"))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    document.title = \"Unklab.fun\"\n  }, [])\n\n  return (\n    <Router>\n      <div style={{width: \"100%\"}}>\n        <NavBar/>\n\n        <Switch>\n          <Route exact path=\"/\">\n            {imageApi !== null ? \n              <Main \n                layoutState={layoutState} \n                setLayoutState={setLayoutState} \n                imageApi={imageApi}\n                fetchImages={fetchImages}\n              /> : <div> Getting posts... </div>}\n          </Route>\n          <Route exact path=\"/post/:postId\">\n            <PostDetails/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/home/spyro/js/unklabfun_react/src/components/Main.js",[],"/home/spyro/js/unklabfun_react/src/components/NavBar.js",[],"/home/spyro/js/unklabfun_react/src/components/Card.js",["32","33","34","35"],"import { Card, CardActionArea, CardContent, CardMedia, Typography, Zoom } from '@material-ui/core'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\n\nconst MyCard = ({img, imgTitle, hasMedia, postId, saveScrollPosition, groupKey, idx}) => {\n    const [imgState, setImgState] = useState(false)\n    let history = useHistory()\n\n    // useEffect(() => {\n    //     let _img = new Image()\n    //     _img.src = img\n    //     _img.onload = async () => setImgState(true)\n\n    //     if(!hasMedia)\n    //         setImgState(true)\n\n    //     // eslint-disable-next-line react-hooks/exhaustive-deps\n    // }, [])\n\n    return (\n        <div style={{width: '90%'}}>\n            {/* <Zoom in={true} timeout={400} style={{transitionDelay: '500ms'}}> */}\n                <Card>\n                    <CardActionArea onClick={() => {\n                            saveScrollPosition(groupKey, idx % 12)\n                            history.push(`/post/${postId}`)\n                        }}>\n                        {hasMedia ? <CardMedia \n                            component=\"img\" \n                            image={img} \n                            style={{width: '100%'}}\n                        /> : null}\n                        {imgTitle.length > 0 ? <CardContent>\n                            <Typography variant=\"body2\">\n                                {imgTitle}\n                            </Typography>\n                        </CardContent> : null}\n                    </CardActionArea>\n                </Card>\n            {/* </Zoom> */}\n        </div>\n    )\n}\n\nexport default MyCard","/home/spyro/js/unklabfun_react/src/components/PostDetail.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":43,"column":6,"nodeType":"42","endLine":43,"endColumn":8,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":1,"column":68,"nodeType":"46","messageId":"47","endLine":1,"endColumn":72},{"ruleId":"44","severity":1,"message":"48","line":2,"column":17,"nodeType":"46","messageId":"47","endLine":2,"endColumn":26},{"ruleId":"44","severity":1,"message":"49","line":6,"column":12,"nodeType":"46","messageId":"47","endLine":6,"endColumn":20},{"ruleId":"44","severity":1,"message":"50","line":6,"column":22,"nodeType":"46","messageId":"47","endLine":6,"endColumn":33},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchImages'. Either include it or remove the dependency array.","ArrayExpression",["53"],"no-unused-vars","'Zoom' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'imgState' is assigned a value but never used.","'setImgState' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"54","fix":"55"},"Update the dependencies array to be: [fetchImages]",{"range":"56","text":"57"},[1814,1816],"[fetchImages]"]